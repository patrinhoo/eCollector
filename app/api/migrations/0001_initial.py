# Generated by Django 5.0.2 on 2024-02-20 21:04

import api.models
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Card",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("catalog_number", models.CharField(max_length=128)),
                ("name", models.CharField(max_length=64)),
                (
                    "awers",
                    models.ImageField(upload_to=api.models.card_image_file_path),
                ),
                (
                    "rewers",
                    models.ImageField(upload_to=api.models.card_image_file_path),
                ),
                ("printed_amount", models.CharField(max_length=64)),
                (
                    "nr_of_pulses",
                    models.IntegerField(
                        choices=[
                            (5, "Five"),
                            (10, "Ten"),
                            (15, "Fifteen"),
                            (20, "Twenty"),
                            (25, "Twenty Five"),
                            (30, "Thirty"),
                            (35, "Thirty Five"),
                            (50, "Fifty"),
                            (100, "One Hundred"),
                            (150, "One Hundred Fifty"),
                            (200, "Two Hundred"),
                        ]
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, max_digits=8)),
                ("production_date", models.DateField()),
                ("expiration_date", models.DateField()),
                ("series", models.CharField(max_length=64)),
                (
                    "prefix",
                    models.PositiveBigIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(9999),
                        ]
                    ),
                ),
                ("producer", models.CharField(max_length=64)),
                (
                    "material_type",
                    models.CharField(
                        choices=[
                            ("CARTOON", "Cartoon"),
                            ("PLASTIC", "Plastic"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=32,
                    ),
                ),
                (
                    "shape",
                    models.CharField(
                        choices=[
                            ("RECTANGLE", "Rectangle"),
                            ("CIRCLE", "Circle"),
                            ("HEART", "Heart"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=32,
                    ),
                ),
                (
                    "surface_type",
                    models.CharField(
                        choices=[
                            ("MAT", "Mat"),
                            ("GLOSS", "Gloss"),
                            ("COATED", "Coated"),
                            ("MAT_COATED", "Mat Coated"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=32,
                    ),
                ),
                (
                    "number_printype",
                    models.CharField(
                        choices=[
                            ("EMBOSSED_HORIZONTAL", "Embossed Horizontal"),
                            ("EMBOSSED_VERTICAL", "Embossed Vertical"),
                            ("PRINTED_HORIZONTAL", "Printed Horizontal"),
                            ("PRINTED_VERTICAL", "Printed Vertical"),
                        ],
                        max_length=32,
                    ),
                ),
                ("number_type", models.CharField(max_length=64)),
                ("magnetic_stripe_width", models.CharField(max_length=64)),
                (
                    "gsm_operator",
                    models.CharField(
                        choices=[
                            ("ERA", "Era"),
                            ("TAK_TAK", "Tak Tak"),
                            ("IDEA", "Idea"),
                            ("POP", "Pop"),
                            ("ORANGE", "Orange"),
                            ("PLUS", "Plus"),
                            ("SIMPLUS", "Simplus"),
                            ("PLUSH", "Plush"),
                            ("HEYAH", "Heyah"),
                            ("PLAY", "Play"),
                            ("REDBULL", "Redbull"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=32,
                    ),
                ),
                (
                    "chip_type",
                    models.CharField(
                        choices=[
                            ("MANUFACTURER", "Manufacturer"),
                            ("PATTERN", "Pattern"),
                            ("IMAGE", "Image"),
                        ],
                        max_length=32,
                    ),
                ),
                ("publisher", models.CharField(max_length=64)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("HAVE", "Have"),
                            ("MISSING", "Missing"),
                            ("EXCESS", "Excess"),
                        ],
                        max_length=32,
                    ),
                ),
                ("comment", models.CharField(max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
